package Java;

import java.util.Scanner;
import java.util.*;

public class KnapsackProblem {
public static int knapsack(int n,int w ,int[]profits,int[]weights){
int [][]mat=new int[n+1][w+1];
for(int i=0;i<=n;i++){
// j is the current capacity of each weight
for(int j=0;j<=w;j++){
if(i==0||j==0){
mat[i][j]=0; //Initialize the first row and first column with zeroes
} else if(weights[i-1]<=j){
// If current item is less than or equal to weight then we need to find maximum.
mat[i][j]=Math.max(mat[i-1][j],profits[i-1]+mat[i-1][j-weights[i-1]]);
}else{
 // if the current items weight is greater than the current capacity
mat[i][j]=mat[i-1][j];
}
}
}
return mat[n][w];
}
public static void main(String[] args){
Scanner sc=new Scanner(System.in);
System.out.println("The total number of items available for selection.");
int n=sc.nextInt();
System.out.println("The capacity of the knapsack.");
int w=sc.nextInt();
int profits[]=new int[n];
int weights[]=new int[n];
System.out.println("Enter profits of the objects");
for(int i=0;i<n;i++){
 profits[i]=sc.nextInt();}
System.out.println("Enter weights of the objects");
for(int i=0;i<n;i++){
 weights[i]=sc.nextInt();}
//result of the Knapsack 0/1 problem
int result=knapsack(n,w,profits,weights);
System.out.println("Maximum value in the knapsack:"+result);
}
}
